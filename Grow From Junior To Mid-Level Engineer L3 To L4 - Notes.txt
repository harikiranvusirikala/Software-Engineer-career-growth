Overview
How This Course Works
Here are the core parts of the lesson:
• You'll understand what it means to be a junior vs. a mid-level engineer in the market, including the interview space
• We walk you through the course objectives. By the end of the course, you will understand:
	• 💡 Truly understand the difference between a junior engineer and a mid-level engineer
	• 🛠️ Learn to code like a mid-level engineer
	• 💪 Know what it means to be truly independent
	• 🧠 Have the right mindset to act as a mid-level
	• ✅ Define a clear roadmap to mid-level


At A Glance: Junior Vs. Mid-Level
What exactly does it mean to be a junior engineer vs. a mid-level engineer? What's the gap? This lesson teaches you:
• What it means at a high-level to be a junior vs. a mid-level engineer
• The difference in execution between a junior engineer and a mid-level engineer
• The types of tasks junior engineers work on vs. a mid-level engineer
• The ownership and scope difference between a junior vs. a mid-level engineer
• The difference in organizational complexity between junior engineers and mid-level engineers


It's On You
For later promotions (i.e. senior and beyond) there are many other factors at play besides your personal skill and growth. This isn't the case for junior engineer -> mid-level engineer. This lesson teaches you:
• The fundamental difference between the junior -> mid-level promotion and others when it comes to landing impact
• How to choose teams and projects as a junior engineer aiming to grow fast
• What matters when it comes to the junior -> mid-level promotion


Structuring Your Growth
Even though junior engineer to mid-level engineer is the 1st and easiest promotion, it's still a meaningful evolution with many parts. This lesson teaches you:
• The 3 core areas of improvement to grow from junior -> mid-level
• The most important area to improve to make the junior -> mid-level promotion
• How you should process the advice from this course



The Code
Decomposition
As a junior engineer, you will inevitably get a problem that's super scary which you have 0 idea how to solve. This will probably happen sooner rather than later. This lesson teaches you:

• The core tactic you need to master to solve large, incredibly complex problems
• Why decomposition is critical to being a good engineer
• The differences between junior and mid-level engineers when it comes to decomposition
• What it means to effectively decompose a problem, shown with an in-depth example


Code Quality
In order to survive as a junior engineer, you need to learn how to code fast. The next step is to learn how to code well. This lesson teaches you:
• The 2 core components behind code quality
• The differences between junior and mid-level engineers when it comes to their pull request quality
• The many ingredients behind a clean pull request and which ones matter the most
• What a clean pull request looks like, one showing strong mid-level engineer behavior
• The differences between junior and mid-level engineers when it comes to their technical decision making
• Why communication is so important when it comes to technical decisions and how mid-level engineers do it better than junior engineers
• How to understand seniority from fresh junior to strong mid-level through the lens of technical decision making
• A simple metric to measure your code quality and see if you're making good progress to mid-level


Code Review
As a mid-level engineer, it's not enough to write good code yourself - You need to help others write good code as well. This lesson teaches you:
• How junior and mid-level engineers differ when it comes to code review quantity, shown with concrete Meta numbers
• The difference between a junior engineer code review comment vs. a mid-level engineer code review comment, explained with an in-depth example


Debugging
When it comes to software, there will always be bugs. What many realizes don't realize is that your attitude towards bugs is a huge marker of your seniority. This lesson teaches you:
• Why junior engineers usually don't get assigned bugs
• The differences between junior engineers and mid-level engineers when it comes to bugs
• How to evaluate bug complexity overall
• What a mid-level engineer bug looks like vs. a junior engineer bug


Become A Go-To Person
One of the most obvious signs of engineer seniority is that everybody on their team goes to them for help with certain areas. More senior = more areas. This lesson teaches you:
• The easy way to understand the difference in mentality between junior and mid-level engineers when it comes to ownership
• How to become a go-to person for your area
• The one mantra you need to follow to organically deduce all the proper action items to become a go-to person



Independence
Be Vulnerable
As a junior engineer, you will have a lot of weaknesses. How you deal with them will greatly determine how fast you grow. This lesson teaches you:
• The definition of true strength and how it relates to being vulnerable
• A simple strategy to become very independent very quickly
• The difference in mindset when it comes to independence for junior engineers vs. mid-level engineers
• Why you can't solo-study your way towards becoming a great engineer


Ask Great Questions
In order to grow fast as an engineer, you need to ask a lot of questions. This lesson teaches you:
• The differences between junior and mid-level engineers when it comes to asking question, particularly question quality
• What a junior engineer question looks like vs. a mid-level engineer question
• How to demonstrate technical mastery in your questions to make yourself look even better when asking for help


Disambiguation
Engineers will constantly get tasks that aren't fully defined, especially if they work at a top tech company like FAANG. This lesson teaches you:
• The differences between junior and mid-level engineers when it comes to disambiguation
• How mid-level engineers are much more effective at disambiguation compared to junior engineers, explained with an in-depth example


Disambiguation
Engineers will constantly get tasks that aren't fully defined, especially if they work at a top tech company like FAANG. This lesson teaches you:
• The differences between junior and mid-level engineers when it comes to disambiguation
• How mid-level engineers are much more effective at disambiguation compared to junior engineers, explained with an in-depth example



Collaboration
Be A Feedback Sponge
We all have blind spots, and you need feedback to see them. Getting feedback is especially important as an engineer given how information-dense the software field is. This lesson teaches you:
• Why a surprising amount of junior engineers are terrible with feedback
• Why you should almost never push back against feedback you disagree with
• How not being good with feedback can severely damage your career, explained with an in-depth example
• The differences between junior and mid-level engineers when it comes to handling feedback


1 on 1 Meetings
1 on 1 meetings are some of the most important and powerful uses of time... when leveraged properly (which junior engineers often don't). This lesson teaches you:
• The difference between junior and mid-level engineers when it comes to 1 on 1 meetings
• The simple, proactive tactic you should use for every single 1 on 1 meeting you have to make them far more useful


Participating In Bigger Meetings
Big meetings can be daunting for engineers, especially junior ones - What if you say something dumb? This lesson teaches you:
• The difference between junior and mid-level engineers when it comes to meeting participation, explained with very simple pictures
• Tactics you can use to come up with more to say in meetings, even if you're the most junior person there
• A clever tactic you can use to participate in a meeting and add value to the discussion, even if you aren't entirely sure of what's going on


Show Your Work
It's not enough to do the work - You also need to do the work to get full credit for it. This lesson teaches you:
• The 2 big components behind showing your work properly
• The differences between junior engineers and mid-level engineers when it comes to showing their work
• How mid-level engineers give far more effective status updates compared to junior engineers, explained with an in-depth example



Conclusion
High-Level Roadmap
There's a bunch of different skills you need to develop as a junior engineer to grow to a mid-level engineer. To make things trickier, the order in which you develop them matters a lot. This lesson teaches you:
• The 4-phases high-level roadmap to grow from junior engineer to mid-level
• How long it takes to go from phase to phase on the mid-level engineer growth trajectory
• The necessary components you need to have to establish a strong presence on your team, strong enough to merit a mid-level engineer promotion


Done Is Better Than Perfect
We all make mistakes. In fact, we'll all make a lot of mistakes as software engineers, especially when we're junior. This lesson teaches you:
• The many types of dumb things you will inevitably do as a junior engineer (and continue doing as a mid-level/senior/staff/principal engineer)
• The simple growth mentality and formula you should follow to speed run the junior to mid-level engineer
• Why it's awesome to be the dumbest person in the room
• A simple mathematical way to understand the difference between a fast-growing junior engineer and a slow-growing junior engineer

