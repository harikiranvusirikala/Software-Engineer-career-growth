Overview
How This Course Works
Here are the core parts of the lesson:
‚Ä¢ You'll understand what it means to be a mid-level engineer vs. a senior engineer in the market, including the interview space.
‚Ä¢ We walk you through the course objectives. By the end of the course, you will understand:
	‚Ä¢ üí° Truly understand the difference between a mid-level engineer and a senior engineer
	‚Ä¢ üß† Have the right mindset to behave as a senior engineer
	‚Ä¢ üõ†Ô∏è Identify your technical gaps to senior engineer
	‚Ä¢ üìÉ Figure out your fundamental gaps to senior engineer
	‚Ä¢ ‚úÖ Define a clear roadmap to senior engineer


Why Is The Senior Promotion So Hard?
For most engineers, going from junior to mid-level isn't too hard with many of them achieving it unintentionally. This leads to them being surprised when the next promotion of mid-level to senior is so painfully difficult. This lesson teaches you:
‚Ä¢ The fundamental dynamic shift in skill development going from mid-level to senior
‚Ä¢ Why team selection is very important for growing to senior
‚Ä¢ The ambiguity of the senior promotion and the 2 broad paths you can take to get there
‚Ä¢ The large lagging nature of the senior promotion


At A Glance: Mid-Level Vs. Senior
What exactly does it mean to be a mid-level engineer vs. a senior engineer? What's the gap? This lesson teaches you:
‚Ä¢ What it means at a high-level to be a mid-level engineer vs. a senior engineer
‚Ä¢ The types of projects mid-level engineers work on vs. a senior engineer
‚Ä¢ The ownership and scope difference between a mid-level engineer vs. a senior engineer
‚Ä¢ The difference in organizational complexity between mid-level engineers and senior engineers


Structuring Your Growth
There are a lot of new skills you need to develop to go from mid-level engineer to senior engineer, far more than most people realize. So how does one process of all this? This lesson teaches you:
‚Ä¢ The 4 Meta engineering axes and what they mean (we'll be using these to organize the teachings from the course).
‚Ä¢ How to view the overall learning from this course
‚Ä¢ Why the senior promotion is different when it comes to these 4 engineering axes
‚Ä¢ The strategy you should follow to structure your growth journey, using this course's material as the basis


Finding The Right Team
Not every engineering team can support an additional senior engineer. This lesson teaches you:
‚Ä¢ What to look for in terms of product scope when choosing an engineering team to grow to senior
‚Ä¢ The people ingredients of a team that's good for senior promotion
‚Ä¢ Exactly what a great team for senior promotion looks like



Impact
The Goggles
Here's the harsh truth: The vast majority of mid-level engineers who are stuck at that level and unable to reach senior are holding themselves back (at least to some extent). This lesson teaches you:
‚Ä¢ The classic unhealthy mindset that mid-level engineers have that keeps them from ever reaching senior
‚Ä¢ How to correct the novice mid-level engineer mindset and evolve towards a senior engineer one by putting on The Goggles
‚Ä¢ How to think about The Goggles after you are aware of them (which you will be after going through this lesson)
‚Ä¢ The general way high-performing senior engineers (and beyond) view the world


Take Greater Ownership
As a senior engineer, you need to show strong ownership. Many mid-level engineers are told this by their manager but are unsure as to what that means. This lesson teaches you:
‚Ä¢ Why the "points" you get for impact aren't just correlated to the impact of the projects you work on
‚Ä¢ How to get more credit for each project you work on
‚Ä¢ What it means to show stronger, more holistic project ownership with a real-life example from Alex's past at Instagram


Fill In The Gaps
Senior engineers solve fundamentally different problems compared to mid-level engineers. This lesson teaches you:
‚Ä¢ The expectation for senior engineer mindset and behavior when problems arise in a project they're working on
‚Ä¢ The types of problems that mid-level engineers tend to avoid
‚Ä¢ The types of problems that senior engineers uniquely solve compared to more junior engineers



Engineering Excellence
Code Quality
Mid-level engineers are usually very solid at coding, but what most don't realize is how high the ceiling truly is when it comes to code quality. This lesson teaches you:
‚Ä¢ The difference in code quality between junior, mid-level, and senior engineers
‚Ä¢ What a senior engineer level pull request looks like


Code Review
Writing code is great, but so is reviewing code. In fact, being great at reviewing code is more impactful than being great at writing code 90%+ of the time! This lesson teaches you:
‚Ä¢ How the writing code vs. reviewing code dynamic changes as you get to senior
‚Ä¢ Why senior engineers tend to review more code than they write
‚Ä¢ How senior engineers expand their code review scope while mid-level engineer code review scope tends to be more constrained with a real-life example
‚Ä¢ The difference between a senior engineer code review comment vs. a mid-level engineer code review comment


Debugging
Debugging is one of the most important skills every software engineer needs to develop. Despite this, many software engineers see bugs as a source of frustration instead of opportunity. This lesson teaches you:
‚Ä¢ The mindset shift that has to happen when a mid-level engineer grows to senior engineer when it comes to bugs, particularly large production outages
‚Ä¢ How senior engineers solve different types of bugs of a broader scope compared to mid-level engineers


System Design
System design is a topic engineers are becoming more and more familiar with, largely due to their emerging prevalence in interviews. It's also critical for the mid-level to senior promotion. This lesson teaches you:
‚Ä¢ Why system design is the most important technical skill that mid-level engineers need to develop to grow to senior
‚Ä¢ The ingredients of a high-quality system design document
‚Ä¢ How to get feedback on your system design document
‚Ä¢ Tactics to run an effective technical review meeting



Direction
Just 1 Sentence Is Enough
As a software engineer, you will often get tasks and projects that aren't fully defined. How you react and are able to perform in these scenarios is a huge factor when it comes to determining your seniority. This lesson teaches you:
‚Ä¢ A simple framework to understand the expectations of a senior engineer when it comes to handling ambiguity
‚Ä¢ The different components that go into converting a single sentence to a full-blown project


Work Towards The Team Goal
Software engineers aren't paid to write code; they're paid to solve problems. However, this mindset often takes years for engineers to truly internalize, often at the senior level. This lesson teaches you:
‚Ä¢ How mid-level engineers and senior engineers react different when given a project
‚Ä¢ The questions every senior engineer needs to ask when given a project
‚Ä¢ What needs to be done in order to understand the true impact of a project


What's The Plan?
The best engineers act proactively instead of reactively, and this is critical for successful project execution. This lesson teaches you:
‚Ä¢ The evolution in ownership of a project when it comes to a mid-level engineer vs. a senior engineer
‚Ä¢ What a good project plan looks like


Project Management
Planning a project is just the first step: Execution is when things really matter. The problem is that every software engineer leading a project should expect the unexpected, especially at a top tech company. This lesson teaches you:
‚Ä¢ How senior engineers set themselves apart when leading projects
‚Ä¢ The core ingredients for successfully managing a project, both during and after execution



People
Meetings
Every tech company needs a ton of meetings in order to function. The tricky thing is that a lot of software engineers are introverts, so they have trouble participating in meetings, especially when they're more junior. This lesson teaches you:
‚Ä¢ The differences between junior, mid-level, and senior engineers when it comes to meeting presence
‚Ä¢ The difference in types of meetings mid-level engineers participate in vs. those of senior engineers
‚Ä¢ How meeting ownership shifts as engineers grow from mid-level to senior
‚Ä¢ Tips to run an effective meeting which is an efficient use of time


Build A Strong Internal Network
If you have a meaningful bench of people who are willing to fight for your success, you will succeed as a software engineer. One of the simplest ways to understand seniority is that this bench grows larger and larger over time. This lesson teaches you:
‚Ä¢ How an engineer's internal network at a company evolves as they grow from mid-level to senior, both in terms of breadth and depth
‚Ä¢ How to expand your internal network
‚Ä¢ The difference in peer feedback that mid-level engineers get compared to senior engineers, especially with XFN (cross-functional) partners


Onboarding
Onboarding is one of the most important processes for any healthy engineering team. Helping the newbies is both critical and rewarding. This lesson teaches you:
‚Ä¢ How a senior engineer levels up the team more when helping with onboarding compared to a mid-level engineer
‚Ä¢ Different ways to achieve multiplicative impact with onboarding instead of singular, even when you are the one onboarding!


Mentorship is one of the most skills to master as a software engineer, especially at senior levels. It is both a way for you to do some good and scale yourself. This lesson teaches you:
‚Ä¢ The difference between passive and active mentorship
‚Ä¢ Ways to provide passive mentorship to teammates
‚Ä¢ Why you should consider taking on an intern as a mid-level engineer growing to senior
‚Ä¢ The jump in quality when it comes to mentorship advice given by a mid-level engineer vs. a senior engineer
‚Ä¢ The key thing to remember when being an effective mentor

